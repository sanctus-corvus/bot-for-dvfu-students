import telebot
import json
import os
import sys
import time
import math
import requests
from telebot import types
from telebot.util import escape
from geopy.geocoders import Nominatim
from geopy.exc import GeocoderTimedOut, GeocoderServiceError

API_TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN')
GISMETEO_TOKEN = os.environ.get('GISMETEO_API_TOKEN')

if not API_TOKEN:
    print("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
    sys.exit("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN")
if not GISMETEO_TOKEN:
    print("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è GISMETEO_API_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
    sys.exit("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è GISMETEO_API_TOKEN")
print("–¢–æ–∫–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

GISMETEO_API_WEATHER_CURRENT = 'https://api.gismeteo.net/v3/weather/current/'
DATA_FILE = 'user_tasks.json'
TASKS_PER_PAGE = 5
LAST_TASKS_COUNT = 10

def load_data():
    try:
        if not os.path.exists(DATA_FILE): return {}
        with open(DATA_FILE, 'r', encoding='utf-8') as f: content = f.read();
        if not content: return {}
        data = json.loads(content)
        if not isinstance(data, dict): print(f"–û—à–∏–±–∫–∞: –û–∂–∏–¥–∞–ª–∞—Å—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ dict –≤ {DATA_FILE}, –Ω–∞–π–¥–µ–Ω–æ {type(data)}."); return {}
        return data
    except json.JSONDecodeError: print(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –≤ —Ñ–∞–π–ª–µ {DATA_FILE}."); return {}
    except Exception as e: print(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}"); return {}

def save_data(data):
    try:
        with open(DATA_FILE, 'w', encoding='utf-8') as f: json.dump(data, f, indent=4, ensure_ascii=False)
    except Exception as e: print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª {DATA_FILE}: {e}")

def get_user_data(chat_id):
    global all_user_data
    chat_id_str = str(chat_id)
    if chat_id_str not in all_user_data or not isinstance(all_user_data[chat_id_str], dict) or \
            'tasks' not in all_user_data[chat_id_str] or 'next_id' not in all_user_data[chat_id_str]:
        all_user_data[chat_id_str] = {'tasks': [], 'next_id': 1}
    return all_user_data[chat_id_str]

def get_coordinates_by_city_name(city_name):
    try:
        geolocator = Nominatim(user_agent="my_telegram_task_weather_bot/1.0")
        location = geolocator.geocode(city_name, language='ru', timeout=10)
        if location:
            print(f"–ì–µ–æ–∫–æ–¥–∏–Ω–≥ –¥–ª—è '{city_name}': {location.latitude}, {location.longitude} ({location.address})")
            return location.latitude, location.longitude, location.address
        else:
            print(f"–ì–µ–æ–∫–æ–¥–∏–Ω–≥ –Ω–µ –Ω–∞—à–µ–ª: '{city_name}'")
            return None, None, f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –≥–æ—Ä–æ–¥–∞ '{escape(city_name)}'."
    except GeocoderTimedOut: return None, None, "–°–µ—Ä–≤–∏—Å –≥–µ–æ–∫–æ–¥–∏–Ω–≥–∞ –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –≤–æ–≤—Ä–µ–º—è."
    except GeocoderServiceError as e: return None, None, f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ –≥–µ–æ–∫–æ–¥–∏–Ω–≥–∞: {e}"
    except Exception as e: print(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≥–µ–æ–∫–æ–¥–∏–Ω–≥–∞ '{city_name}': {e}"); return None, None, "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç."

def get_weather_by_coords(latitude, longitude):
    if not GISMETEO_TOKEN: return None, "–¢–æ–∫–µ–Ω API –ø–æ–≥–æ–¥—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω."
    headers = {'X-Gismeteo-Token': GISMETEO_TOKEN, 'Accept-Encoding': 'gzip'}
    params = {'latitude': latitude, 'longitude': longitude, 'lang': 'ru'}
    url = GISMETEO_API_WEATHER_CURRENT
    print(f"–ó–∞–ø—Ä–æ—Å –ø–æ–≥–æ–¥—ã: URL={url}, Params={params}")
    try:
        response = requests.get(url, headers=headers, params=params, timeout=10)
        print(f"–û—Ç–≤–µ—Ç API Gismeteo: –°—Ç–∞—Ç—É—Å={response.status_code}")
        response.raise_for_status()
        data = response.json(); meta = data.get('meta', {})
        if meta.get('status_code') != 200 or meta.get('status') is False:
            error_detail = f"API Gismeteo –æ—à–∏–±–∫–∞ (—Å—Ç–∞—Ç—É—Å {meta.get('status_code')})"
            if 'errors' in meta and meta['errors']: error_detail += f": {meta['errors'][0].get('detail', '–ù–µ—Ç –¥–µ—Ç–∞–ª–µ–π')}"
            print(error_detail); return None, error_detail
        weather_data = data.get('data')
        if not weather_data: return None, "API Gismeteo –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ."
        return weather_data, None
    except requests.exceptions.HTTPError as e:
        error_message = f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã: {e.response.status_code}"
        try:
            error_data = e.response.json(); meta_error = error_data.get('meta', {}).get('errors', [])
            if meta_error: error_message += f" ({meta_error[0].get('detail', '–ù–µ—Ç –¥–µ—Ç–∞–ª–µ–π')})"
        except Exception: pass
        print(f"HTTP –æ—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ Gismeteo: {e}"); return None, error_message
    except requests.exceptions.RequestException as e: print(f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ Gismeteo: {e}"); return None, f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: {e}"
    except Exception as e: print(f"–û—à–∏–±–∫–∞ –≤ get_weather_by_coords: {e}"); return None, "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã."

def format_weather_message(weather_data, location_name):
    if not weather_data: return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ."
    try:
        temp_air = weather_data.get('temperature', {}).get('air', {}).get('C', '–Ω/–¥')
        temp_comfort = weather_data.get('temperature', {}).get('comfort', {}).get('C', '–Ω/–¥')
        description = weather_data.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')
        humidity = weather_data.get('humidity', {}).get('percent', '–Ω/–¥')
        pressure = weather_data.get('pressure', {}).get('mm_hg_atm', '–Ω/–¥')
        wind_speed = weather_data.get('wind', {}).get('speed', {}).get('m_s', '–Ω/–¥')
        wind_dir_code = weather_data.get('wind', {}).get('direction', {}).get('scale_8')
        cloud_perc = weather_data.get('cloudiness', {}).get('percent', '–Ω/–¥')
        prec_type_code = weather_data.get('precipitation', {}).get('type')
        weather_emoji = weather_data.get('icon', {}).get('emoji', '‚ùì')
        wind_dir_map = {0: "–®—Ç–∏–ª—å", 1: "–°", 2: "–°–í", 3: "–í", 4: "–Æ–í", 5: "–Æ", 6: "–Æ–ó", 7: "–ó", 8: "–°–ó", None: "-"}
        wind_dir = wind_dir_map.get(wind_dir_code, '-')
        prec_type_map = {0: "–ë–µ–∑ –æ—Å–∞–¥–∫–æ–≤", 1: "–î–æ–∂–¥—å", 2: "–°–Ω–µ–≥", 3: "–°–º–µ—à–∞–Ω–Ω—ã–µ", None: "-"}
        precipitation = prec_type_map.get(prec_type_code, '-')
        message = f"*{escape(location_name)}* | –°–µ–π—á–∞—Å {weather_emoji}\n\n" \
                  f"üå°Ô∏è *–¢–µ–º–ø.*: {temp_air}¬∞C ({temp_comfort}¬∞C –æ—â—É—â.)\n" \
                  f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ*: {description}\n" \
                  f"üíß *–í–ª–∞–∂–Ω.*: {humidity}%\n" \
                  f"üß≠ *–î–∞–≤–ª.*: {pressure} –º–º —Ä—Ç.—Å—Ç.\n" \
                  f"üí® *–í–µ—Ç–µ—Ä*: {wind_dir}, {wind_speed} –º/—Å\n" \
                  f"‚òÅÔ∏è *–û–±–ª–∞—á–Ω.*: {cloud_perc}%\n" \
                  f"‚òî *–û—Å–∞–¥–∫–∏*: {precipitation}"
        return message
    except Exception as e: print(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–≥–æ–¥—ã v3: {e}"); return "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ."

def generate_task_list_message(chat_id, page=1, context="list"):
    user_data = get_user_data(chat_id); tasks = user_data.get('tasks', [])
    if not tasks: return "üì≠ –¢–≤–æ–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç.", None
    sorted_tasks = sorted(tasks, key=lambda t: (t.get('status', 'pending') != 'pending', -t.get('id', 0)))
    list_title = f"üìã *–¢–≤–æ–∏ –∑–∞–¥–∞—á–∏*"; total_tasks = len(sorted_tasks); total_pages = math.ceil(total_tasks / TASKS_PER_PAGE)
    page = max(1, min(page, total_pages if total_pages > 0 else 1)); start_index = (page - 1) * TASKS_PER_PAGE; end_index = start_index + TASKS_PER_PAGE
    tasks_on_page = sorted_tasks[start_index:end_index]
    if not tasks_on_page: return f"{list_title}\n\nü§î –ó–∞–¥–∞—á –Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–µ—Ç.", None
    message_text = f"{list_title} (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}):\n\n"
    markup = types.InlineKeyboardMarkup(row_width=2); task_buttons = []
    for task in tasks_on_page:
        status_icon = "‚è≥" if task.get('status', 'pending') == 'pending' else "‚úîÔ∏è"; task_id = task.get('id'); task_text = escape(task.get('text', '–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞'))
        message_text += f"{status_icon} `[ID: {task_id}]` {task_text}\n"; buttons_row = []
        if task.get('status', 'pending') == 'pending': buttons_row.append(types.InlineKeyboardButton(f"‚úÖ –í—ã–ø–æ–ª–Ω–∏—Ç—å {task_id}", callback_data=f"{context}_done_{task_id}_{page}"))
        else: buttons_row.append(types.InlineKeyboardButton(f"‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å {task_id}", callback_data=f"{context}_undo_{task_id}_{page}"))
        buttons_row.append(types.InlineKeyboardButton(f"‚ùå –£–¥–∞–ª–∏—Ç—å {task_id}", callback_data=f"{context}_delete_{task_id}_{page}"))
        task_buttons.extend(buttons_row)
    markup.add(*task_buttons); nav_buttons = []
    if page > 1: nav_buttons.append(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{context}_page_{page - 1}"))
    if page < total_pages: nav_buttons.append(types.InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"{context}_page_{page + 1}"))
    if nav_buttons: markup.row(*nav_buttons)
    return message_text, markup

def generate_completed_list_message(chat_id, page=1):
    user_data = get_user_data(chat_id); completed_tasks = [t for t in user_data.get('tasks', []) if t.get('status') == 'completed']
    if not completed_tasks: return "‚úÖ –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.", None
    sorted_tasks = sorted(completed_tasks, key=lambda t: -t.get('id', 0)); list_title = "‚úîÔ∏è *–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏*"; context = "completed"
    total_tasks = len(sorted_tasks); total_pages = math.ceil(total_tasks / TASKS_PER_PAGE)
    page = max(1, min(page, total_pages if total_pages > 0 else 1)); start_index = (page - 1) * TASKS_PER_PAGE; end_index = start_index + TASKS_PER_PAGE
    tasks_on_page = sorted_tasks[start_index:end_index]
    if not tasks_on_page: return f"{list_title}\n\nü§î –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–µ—Ç.", None
    message_text = f"{list_title} (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}):\n\n"
    markup = types.InlineKeyboardMarkup(row_width=2); task_buttons = []
    for task in tasks_on_page:
        task_id = task.get('id'); task_text = escape(task.get('text', '–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞')); message_text += f"‚úîÔ∏è `[ID: {task_id}]` {task_text}\n"
        buttons_row = [types.InlineKeyboardButton(f"‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å {task_id}", callback_data=f"{context}_undo_{task_id}_{page}"),
                       types.InlineKeyboardButton(f"‚ùå –£–¥–∞–ª–∏—Ç—å {task_id}", callback_data=f"{context}_delete_{task_id}_{page}")]
        task_buttons.extend(buttons_row)
    markup.add(*task_buttons); nav_buttons = []
    if page > 1: nav_buttons.append(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{context}_page_{page - 1}"))
    if page < total_pages: nav_buttons.append(types.InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"{context}_page_{page + 1}"))
    if nav_buttons: markup.row(*nav_buttons)
    return message_text, markup

def generate_last_tasks_message(chat_id):
    user_data = get_user_data(chat_id); tasks = user_data.get('tasks', [])
    if not tasks: return f"üïô –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á.", None
    sorted_tasks = sorted(tasks, key=lambda t: -t.get('id', 0))[:LAST_TASKS_COUNT]
    list_title = f"üïô *–ü–æ—Å–ª–µ–¥–Ω–∏–µ {len(sorted_tasks)} –∑–∞–¥–∞—á:*"; context = "last10"
    message_text = f"{list_title}\n\n"
    markup = types.InlineKeyboardMarkup(row_width=2); task_buttons = []
    for task in sorted_tasks:
        status_icon = "‚è≥" if task.get('status', 'pending') == 'pending' else "‚úîÔ∏è"; task_id = task.get('id'); task_text = escape(task.get('text', '–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞'))
        message_text += f"{status_icon} `[ID: {task_id}]` {task_text}\n"; buttons_row = []
        if task.get('status', 'pending') == 'pending': buttons_row.append(types.InlineKeyboardButton(f"‚úÖ –í—ã–ø–æ–ª–Ω–∏—Ç—å {task_id}", callback_data=f"{context}_done_{task_id}_0"))
        else: buttons_row.append(types.InlineKeyboardButton(f"‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å {task_id}", callback_data=f"{context}_undo_{task_id}_0"))
        buttons_row.append(types.InlineKeyboardButton(f"‚ùå –£–¥–∞–ª–∏—Ç—å {task_id}", callback_data=f"{context}_delete_{task_id}_0"))
        task_buttons.extend(buttons_row)
    markup.add(*task_buttons)
    return message_text, markup

def create_main_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    tasks_btn = types.KeyboardButton("üìã –ó–∞–¥–∞—á–∏")
    weather_btn = types.KeyboardButton("‚òÄÔ∏è –ü–æ–≥–æ–¥–∞")
    help_btn = types.KeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å")
    markup.add(tasks_btn, weather_btn, help_btn)
    return markup

bot = telebot.TeleBot(API_TOKEN)

def set_bot_commands(bot_instance):
    commands = [
        types.BotCommand("start", "üöÄ –ó–∞–ø—É—Å–∫ / –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"),
        types.BotCommand("menu", "üìå –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        types.BotCommand("help", "‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"),
        types.BotCommand("add", "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É (<—Ç–µ–∫—Å—Ç>)"),
        types.BotCommand("list", "üìã –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏"),
        types.BotCommand("last", "üïô –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–¥–∞—á–∏"),
        types.BotCommand("completed", "‚úÖ –ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ"),
        types.BotCommand("weather", "‚òÄÔ∏è –£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É (<–≥–æ—Ä–æ–¥>)")
    ]
    try:
        bot_instance.set_my_commands(commands)
        print("–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞: {e}")

def set_bot_description(bot_instance):
    description = "–í–∞—à –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–≥–æ–¥—ã. –£–º–µ–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å, –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∏ –æ—Ç–º–µ—á–∞—Ç—å –∑–∞–¥–∞—á–∏. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–≥–æ–¥—É –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –≥–æ—Ä–æ–¥–∞."
    try:
        bot_instance.set_my_description(description=description, language_code="ru")
        print("–û–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –æ–ø–∏—Å–∞–Ω–∏—è –±–æ—Ç–∞: {e}")

set_bot_commands(bot)
set_bot_description(bot)

print("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
all_user_data = load_data()
print(f"–î–∞–Ω–Ω—ã–µ –¥–ª—è {len(all_user_data)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
print("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")

@bot.message_handler(commands=['start', 'menu'])
def send_welcome_or_menu(message):
    if message.text.startswith('/start'):
        welcome_text = (f"üëã *–ü—Ä–∏–≤–µ—Ç, {escape(message.from_user.first_name)}! –Ø —Ç–≤–æ–π –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫.*\n\n"
                        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.")
        bot.send_message(message.chat.id, welcome_text, reply_markup=create_main_keyboard(), parse_mode='Markdown')
    else:
        bot.send_message(message.chat.id, "üìå –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=create_main_keyboard())

@bot.message_handler(commands=['help'])
def send_structured_help(message):
    help_text = (
        "üìñ *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:*\n"
        "(–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ —Ç–∞–∫–∂–µ –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É '/' –∏–ª–∏ '–ú–µ–Ω—é')\n\n"
        "üöÄ `/start` - –ó–∞–ø—É—Å–∫ / –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n"
        "üìå `/menu` - –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏\n"
        "‚ÑπÔ∏è `/help` - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
        "*–ó–∞–¥–∞—á–∏:*\n"
        "‚ûï `/add <—Ç–µ–∫—Å—Ç>` - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É\n"
        "üìã `/list` - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏\n"
        "üïô `/last` - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ {lc} –∑–∞–¥–∞—á\n"
        "‚úÖ `/completed` - –ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ\n\n"
        "*–ü–æ–≥–æ–¥–∞:*\n"
        "‚òÄÔ∏è `/weather <–≥–æ—Ä–æ–¥>` - –£–∑–Ω–∞—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É"
    ).format(lc=LAST_TASKS_COUNT)
    try:
        bot.reply_to(message, help_text, parse_mode='Markdown')
    except Exception as e: print(f"–û—à–∏–±–∫–∞ /help: {e}")

@bot.message_handler(func=lambda message: message.text == "üìã –ó–∞–¥–∞—á–∏")
def handle_tasks_button(message):
    tasks_info_text = ("üìÅ *–†–∞–∑–¥–µ–ª '–ó–∞–¥–∞—á–∏'*\n\n"
                       "–í—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É:\n"
                       "‚ñ™Ô∏è `/list`\n‚ñ™Ô∏è `/last`\n‚ñ™Ô∏è `/completed`\n‚ñ™Ô∏è `/add <—Ç–µ–∫—Å—Ç>`")
    bot.send_message(message.chat.id, tasks_info_text, parse_mode='Markdown')

@bot.message_handler(func=lambda message: message.text == "‚òÄÔ∏è –ü–æ–≥–æ–¥–∞")
def handle_weather_button(message):
    weather_prompt_text = "üåç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:"
    markup = types.ForceReply(selective=True)
    bot.send_message(message.chat.id, weather_prompt_text, reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
def handle_help_button(message):
    send_structured_help(message)

@bot.message_handler(commands=['add'])
def handle_add_task(message):
    global all_user_data
    try:
        user_data = get_user_data(message.chat.id)
        command_parts = message.text.split(maxsplit=1)
        if len(command_parts) < 2 or not command_parts[1].strip():
            prompt_text = "üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏:"
            markup = types.ForceReply(selective=True)
            bot.reply_to(message, prompt_text, reply_markup=markup)
            return
        task_text = command_parts[1].strip()
        current_id = user_data['next_id']
        new_task = {'id': current_id, 'text': task_text, 'status': 'pending', 'added_at': time.time()}
        user_data['tasks'].append(new_task)
        user_data['next_id'] += 1
        save_data(all_user_data)
        bot.reply_to(message, f"‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞! (ID: `{current_id}`)", parse_mode='Markdown')
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ /add: {e}")
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏.")

@bot.message_handler(commands=['list'])
def handle_list_tasks(message):
    try:
        chat_id = message.chat.id; message_text, markup = generate_task_list_message(chat_id, page=1, context="list")
        bot.send_message(chat_id, message_text, reply_markup=markup, parse_mode='Markdown')
    except Exception as e: print(f"–û—à–∏–±–∫–∞ /list: {e}"); bot.reply_to(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫.")

@bot.message_handler(commands=['last', 'last10'])
def handle_last_tasks(message):
    try:
        chat_id = message.chat.id; message_text, markup = generate_last_tasks_message(chat_id)
        bot.send_message(chat_id, message_text, reply_markup=markup, parse_mode='Markdown')
    except Exception as e: print(f"–û—à–∏–±–∫–∞ /last: {e}"); bot.reply_to(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–¥–∞—á–∏.")

@bot.message_handler(commands=['completed'])
def handle_completed_tasks(message):
    try:
        chat_id = message.chat.id; message_text, markup = generate_completed_list_message(chat_id, page=1)
        bot.send_message(chat_id, message_text, reply_markup=markup, parse_mode='Markdown')
    except Exception as e: print(f"–û—à–∏–±–∫–∞ /completed: {e}"); bot.reply_to(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏.")

@bot.message_handler(commands=['weather'])
def handle_weather_command(message):
    try:
        command_parts = message.text.split(maxsplit=1)
        if len(command_parts) < 2 or not command_parts[1].strip():
            prompt_text = "üåç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:"
            markup = types.ForceReply(selective=True)
            bot.reply_to(message, prompt_text, reply_markup=markup)
            return
        city_name_query = command_parts[1].strip()
        processing_msg = bot.reply_to(message, f"üåç –ò—â—É '{escape(city_name_query)}'...")
        latitude, longitude, full_address = get_coordinates_by_city_name(city_name_query)
        if full_address and not latitude:
            bot.edit_message_text(chat_id=message.chat.id, message_id=processing_msg.message_id, text=f"‚ö†Ô∏è {full_address}")
            return
        location_display_name = full_address if full_address else city_name_query
        bot.edit_message_text(chat_id=message.chat.id, message_id=processing_msg.message_id, text=f"üìç –ù–∞–π–¥–µ–Ω—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã. –ó–∞–ø—Ä–∞—à–∏–≤–∞—é –ø–æ–≥–æ–¥—É...")
        bot.send_chat_action(message.chat.id, 'typing')
        weather_data, error_msg = get_weather_by_coords(latitude, longitude)
        if error_msg:
            bot.edit_message_text(chat_id=message.chat.id, message_id=processing_msg.message_id, text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–≥–æ–¥—ã: {error_msg}")
            return
        weather_message = format_weather_message(weather_data, location_display_name)
        bot.edit_message_text(chat_id=message.chat.id, message_id=processing_msg.message_id, text=weather_message, parse_mode='Markdown')
    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á. –æ—à–∏–±–∫–∞ handle_weather_command: {e}")
        try:
            if 'processing_msg' in locals() and processing_msg: bot.edit_message_text(chat_id=message.chat.id, message_id=processing_msg.message_id, text="‚ùå –í–Ω—É—Ç—Ä. –æ—à–∏–±–∫–∞ –ø–æ–≥–æ–¥—ã.")
            else: bot.reply_to(message, "‚ùå –í–Ω—É—Ç—Ä. –æ—à–∏–±–∫–∞ –ø–æ–≥–æ–¥—ã.")
        except Exception as inner_e: print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–≥–æ–¥—ã: {inner_e}"); bot.send_message(message.chat.id, "‚ùå –í–Ω—É—Ç—Ä. –æ—à–∏–±–∫–∞ –ø–æ–≥–æ–¥—ã.")

@bot.message_handler(func=lambda message: message.reply_to_message is not None and "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏" in message.reply_to_message.text)
def handle_task_text_reply(message):
    task_text = message.text.strip()
    if not task_text:
        bot.reply_to(message, "–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç. –ó–∞–¥–∞—á–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /add <—Ç–µ–∫—Å—Ç>.")
        return
    print(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–∞ –∑–∞–¥–∞—á–∏: '{task_text}'")
    fake_command_message = message
    fake_command_message.text = f"/add {task_text}"
    handle_add_task(fake_command_message)

@bot.message_handler(func=lambda message: message.reply_to_message is not None and "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞" in message.reply_to_message.text)
def handle_city_name_reply(message):
    city_name = message.text.strip()
    if not city_name:
        bot.reply_to(message, "–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –ø—É—Å—Ç–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /weather <–≥–æ—Ä–æ–¥>.")
        return
    print(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å –≥–æ—Ä–æ–¥–∞: '{city_name}'")
    fake_command_message = message
    fake_command_message.text = f"/weather {city_name}"
    handle_weather_command(fake_command_message)

@bot.callback_query_handler(func=lambda call: True)
def handle_callback_query(call):
    global all_user_data; chat_id = call.message.chat.id; message_id = call.message.message_id; callback_data = call.data
    try:
        parts = callback_data.split('_');
        if len(parts) < 2: bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö.", show_alert=True); return
        context = parts[0]; action = parts[1]
        if action == "page":
            try:
                current_page = int(parts[2])
                if context == "list": message_text, markup = generate_task_list_message(chat_id, page=current_page, context=context)
                elif context == "completed": message_text, markup = generate_completed_list_message(chat_id, page=current_page)
                else: bot.answer_callback_query(call.id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫."); return
                bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=message_text, reply_markup=markup, parse_mode='Markdown')
                bot.answer_callback_query(call.id, text=f"–°—Ç—Ä. {current_page}")
            except (ValueError, IndexError): bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ —Å—Ç—Ä.", show_alert=True)
            except Exception as e: print(f"–û—à–∏–±–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ ({context}): {e}"); bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", show_alert=True)
        elif action in ["done", "undo", "delete"]:
            try:
                task_id_to_act = int(parts[2]); current_page = int(parts[3]) if len(parts) > 3 else 1
                user_data = get_user_data(chat_id); task_found = False; task_index = -1
                for i, task in enumerate(user_data.get('tasks', [])):
                    if task.get('id') == task_id_to_act: task_found = True; task_index = i; break
                if not task_found: bot.answer_callback_query(call.id, f"‚ùì –ó–∞–¥–∞—á–∞ {task_id_to_act} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True); update_task_view(context, chat_id, message_id, current_page); return
                alert_text = ""
                if action == "done": user_data['tasks'][task_index]['status'] = 'completed'; alert_text = f"‚úÖ –ó–∞–¥–∞—á–∞ {task_id_to_act} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!"
                elif action == "undo": user_data['tasks'][task_index]['status'] = 'pending'; alert_text = f"‚Ü©Ô∏è –ó–∞–¥–∞—á–∞ {task_id_to_act} –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞!"
                elif action == "delete": del user_data['tasks'][task_index]; alert_text = f"üóëÔ∏è –ó–∞–¥–∞—á–∞ {task_id_to_act} —É–¥–∞–ª–µ–Ω–∞!"
                save_data(all_user_data); bot.answer_callback_query(call.id, text=alert_text)
                update_task_view(context, chat_id, message_id, current_page)
            except (ValueError, IndexError): bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ ID/Page", show_alert=True)
            except Exception as e: print(f"–û—à–∏–±–∫–∞ '{action}' ({context}): {e}"); bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏", show_alert=True)
        else: bot.answer_callback_query(call.id)
    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á. –æ—à–∏–±–∫–∞ callback: {e}, data: {callback_data}")
        try: bot.answer_callback_query(call.id, "–í–Ω—É—Ç—Ä. –æ—à–∏–±–∫–∞", show_alert=True)
        except Exception: pass

def update_task_view(context, chat_id, message_id, page):
    try:
        if context == "list": message_text, markup = generate_task_list_message(chat_id, page=page, context=context)
        elif context == "completed": message_text, markup = generate_completed_list_message(chat_id, page=page)
        elif context == "last10": message_text, markup = generate_last_tasks_message(chat_id)
        else: print(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç: {context}"); return
        bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=message_text, reply_markup=markup, parse_mode='Markdown')
    except telebot.apihelper.ApiTelegramException as e:
        if 'message is not modified' in str(e): print(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message_id} –Ω–µ –∏–∑–º–µ–Ω–µ–Ω–æ.")
        elif 'Too Many Requests' in str(e): print(f"–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ {message_id}."); time.sleep(1)
        else: print(f"–û—à–∏–±–∫–∞ API –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ ({context}): {e}")
    except Exception as e: print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ({context}): {e}")

if __name__ == '__main__':
    print("–ó–∞–ø—É—Å–∫ polling...")
    try:
        bot.infinity_polling(timeout=20, long_polling_timeout=10)
    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ polling: {e}")
        time.sleep(15)
    finally:
        print("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π...")
        save_data(all_user_data)
        print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")